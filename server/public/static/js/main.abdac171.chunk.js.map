{"version":3,"sources":["api/constants.tsx","components/NotFountComponent.tsx","api/index.tsx","actions/snackbarActions.ts","components/Navigation/AccountButton.tsx","actions/productsAction.ts","components/ProductCard.tsx","components/Home/index.tsx","components/Admin/constants/FieldSelectors.ts","components/Navigation/Logo.tsx","components/Navigation/NavMenu.tsx","components/Navigation/DrowerMenuButton.tsx","components/Navigation/DrowerMenu.tsx","components/Navigation/Spacer.tsx","components/Navigation/index.tsx","components/Admin/constants/AlertMessages.ts","components/Admin/AddProduct/Form.tsx","components/AlertDialog.tsx","components/Admin/AddProduct/index.tsx","components/Admin/UpdateProduct/Form.tsx","components/Admin/UpdateProduct/index.tsx","components/User/Account/index.tsx","components/User/Login/index.tsx","components/User/Register/index.tsx","components/Alert.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","reducer/index.ts","reducer/authentificationReducer.ts","reducer/productsReducer.ts","reducer/snackbarReducers.ts","store/index.ts","index.tsx"],"names":["AddProductMessages","NotFountComponent","props","showNav","useEffect","patchProduct","id","updatedProduct","axios","patch","deleteProduct","delete","snackbarActionManager","snackInfo","type","payload","OptionsNames","OptionsLinks","fetchProducts","dispatch","a","fetch","json","response","products","loaded","message","variant","console","log","dump","productsActions","product","method","body","status","conflict","fail","API","data","useStyles","makeStyles","theme","root","width","breakpoints","up","maxWidth","media","display","height","paddingTop","justifyContent","alignItems","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","description","overflow","icon","top","position","ProductCard","useDispatch","isLogged","useSelector","state","classes","_id","name","details","price","promotion","active","piecesLeft","src","useState","expanded","setExpanded","Card","className","CardHeader","action","to","IconButton","aria-label","title","subheader","CardMedia","children","image","CardContent","Typography","color","component","CardActions","disableSpacing","onClick","clsx","aria-expanded","Collapse","in","timeout","unmountOnExit","gutterBottom","item","textAlign","loading","fontSize","opacity","Home","areProductsLoaded","productsAreLoaded","items","map","Grid","xs","md","stock","sale","length","container","spacing","justify","alignContent","CircularProgress","FieldSelector","Link","textDecoration","LongMenu","options","accout","logout","login","signup","React","anchorEl","setAnchorEl","open","Boolean","handleAccountMenuClick","event","handleAccountClose","StyledMenu","withStyles","paper","border","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","aria-controls","aria-haspopup","currentTarget","keepMounted","onClose","PaperProps","style","maxHeight","ITEM_HEIGHT","option","MenuItem","value","selected","minWidth","marginRight","Logo","List","padding","navLink","borderBottom","cursor","userSelect","NavMenu","menuButton","hide","DrowerMenuButton","drowerOpen","edge","drawerWidth","appBar","easing","sharp","leavingScreen","appBarShift","easeOut","enteringScreen","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","flexGrow","contentShift","DrowerMenu","useTheme","closeMenu","Drawer","anchor","direction","Divider","text","path","ListItem","button","ListItemText","primary","grow","Spacer","relative","minHeight","growMobile","sectionDesktop","sectionMobile","invisible","GoldAppBar","boxShadow","AppBar","ButtonAppBar","isVisible","setOpen","Toolbar","NoSrcAlert","textFieldWrapper","textField","margin","buttonWrapper","alertField","activeButton","Form","pieces","change","clear","send","fieldWarnings","openDialog","checkFields","removeImage","TextField","label","onChange","ev","target","InputLabelProps","shrink","onFocus","select","prom","desc","rows","multiline","Button","accept","hidden","disabled","startIcon","AlertDialog","yes","no","handleClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","ProductAdder","cardName","setCardName","cardDescription","setCardDescription","cardDetails","setCardDetails","cardPromotion","setCardPromotion","cardPrice","setCardPrice","cardPieces","setCardPieces","cardSrc","setCardSrc","fakeSrc","setFakeSrc","setFieldWarnings","openAlert","setOpenAlert","titleAlert","setTitleAlert","contentAlert","setContentAlert","handleSubmit","preventDefault","newProduct","form","FormData","Object","keys","key","append","identifier","parseInt","file","reader","FileReader","readAsDataURL","onload","base64","result","toString","setImage","files","tempWarnings","reset","update","marginTop","UpdateProduct","match","filter","params","setProduct","getProduct","get","trim","JSON","stringify","AccountInfoComponent","LoginComponent","RegisterComponent","Alert","Main","snackbar","handleSnackbarClose","reason","navVisibility","setNavVisibility","lg","exact","AddProduct","AccountInfo","Login","Register","Snackbar","autoHideDuration","severity","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abdac171.chunk.js","sourcesContent":["enum AddProductMessages\r\n{\r\n    success = \"The product was added succesfully!\",\r\n    fail = \"Something went wrong...\",\r\n    conflict = \"Product name is already in used!\",\r\n    multisuccess = \"Products added succesfully!\"\r\n}\r\n\r\nexport default AddProductMessages;","import React, { useEffect } from 'react';\r\n\r\ninterface Props\r\n{\r\n    showNav: ( is: boolean ) => void;\r\n}\r\n\r\n//@the component that renders when you access an invalid route\r\nconst NotFountComponent: React.FC<Props> = ( props: Props ) =>\r\n{\r\n    const { showNav } = props;\r\n\r\n    useEffect( () =>\r\n    {\r\n        showNav( false );\r\n        return () =>\r\n        {\r\n            showNav( true );\r\n        };\r\n    }, [] );\r\n    return (\r\n        <>\r\n            No page on this path!\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotFountComponent;\r\n","import axios from 'axios';\r\n\r\ninterface Product\r\n{\r\n    name: string;\r\n    price: number;\r\n    description?: string;\r\n    details?: string;\r\n    sale?: number;\r\n    stock?: number;\r\n    src: string;\r\n}\r\n\r\n\r\n// 'http://localhost:5000/products'; = proxy url\r\n\r\n\r\n//get products\r\n// export const fetchProducts = () => axios.get( '/products' );\r\nexport const fetchProducts = () => fetch( '/products' );\r\n\r\n//get specific product\r\nexport const fetchSpecificProduct = ( id: string ) => axios.get( `/products/${ id }` );\r\n\r\n//send new product\r\nexport const postProduct = ( newProduct: FormData ) => fetch( `/products/add-product`, { method: 'POST', body: newProduct } );\r\n\r\n//send new products\r\nexport const postProducts = ( newProducts: Array<FormData> ) => axios.post( `/products/add-products`, newProducts );\r\n\r\n//updete product\r\n\r\nexport const patchProduct = ( id: string, updatedProduct: any ) => axios.patch( `/products/${ id }`, updatedProduct );\r\n\r\nexport const deleteProduct = ( id: string ) => axios.delete( `/products/${ id }` );\r\n\r\nexport const addTestUser = () => axios.post( '/users', {} );","interface SnackInfo\r\n{\r\n    message: string,\r\n    variant: string;\r\n}\r\n\r\nconst showSnackbar = ( snackInfo: SnackInfo ) =>\r\n{\r\n    return {\r\n        type: \"SHOW\",\r\n        payload: snackInfo\r\n    };\r\n};\r\n\r\nconst hideSnackbar = () =>\r\n{\r\n    return {\r\n        type: \"HIDE\",\r\n    };\r\n};\r\n\r\n\r\n\r\nconst snackbarActionManager = {\r\n    show: showSnackbar,\r\n    hide: hideSnackbar,\r\n};\r\n\r\nexport { snackbarActionManager };","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { authentificationAction } from '../../actions';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface StyleMenuProps\r\n{\r\n  id: string;\r\n  anchorEl: any;\r\n  keepMounted: any;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  PaperProps: {};\r\n\r\n}\r\n\r\ntype OptionsInterface = [ string, string ][];\r\n\r\nenum OptionsNames\r\n{\r\n  login = \"Login\",\r\n  signup = \"Sign up\",\r\n  logout = \"Logout\",\r\n  accout = \"Account\"\r\n}\r\n\r\nenum OptionsLinks\r\n{\r\n  login = '/login',\r\n  signup = '/register',\r\n  logout = '/home',\r\n  accout = '/account',\r\n}\r\n\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n  icon: {\r\n    color: '#fafafa',\r\n  },\r\n  Link: {\r\n    textDecoration: 'none',\r\n    color: '#000',\r\n  }\r\n} ) );\r\n\r\n\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\n\r\nconst LongMenu: React.FC = () =>\r\n{\r\n\r\n  //brute force login state\r\n  const isLogged = useSelector( ( state: any ) => state.isLogged );\r\n  const dispatch = useDispatch();\r\n\r\n  //@account menu items\r\n  const options: OptionsInterface = isLogged ?\r\n    [ [ OptionsNames.accout, OptionsLinks.accout ], [ OptionsNames.logout, OptionsLinks.logout ] ] :\r\n    [ [ OptionsNames.login, OptionsLinks.login ], [ OptionsNames.signup, OptionsLinks.signup ] ];\r\n\r\n  const [ anchorEl, setAnchorEl ] = React.useState( null );\r\n  const open = Boolean( anchorEl );\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleAccoutClick = ( event: any ) =>\r\n  {\r\n    setAnchorEl( event.currentTarget );\r\n  };\r\n\r\n\r\n  const handleAccountMenuClick = ( event: any ) =>\r\n  {\r\n    handleAccountClose();\r\n    // sinteticalLogin(event);\r\n  };\r\n\r\n  // @brute force login\r\n  const sinteticalLogin = ( event: any ) =>\r\n  {\r\n    switch ( event.target.innerText )\r\n    {\r\n      case 'Login':\r\n        dispatch( authentificationAction.login() );\r\n        break;\r\n      case 'Logout':\r\n        dispatch( authentificationAction.logout() );\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleAccountClose = () =>\r\n  {\r\n    setAnchorEl( null );\r\n  };\r\n\r\n  const StyledMenu = withStyles( {\r\n    paper: {\r\n      border: '1px solid #d3d4d5',\r\n    },\r\n  } )( ( props: StyleMenuProps ) => (\r\n    <Menu\r\n      elevation={ 0 }\r\n      getContentAnchorEl={ null }\r\n      anchorOrigin={ {\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      } }\r\n      transformOrigin={ {\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      } }\r\n      open={ false }\r\n      { ...props }\r\n    />\r\n  ) );\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        aria-label=\"more\"\r\n        aria-controls=\"long-menu\"\r\n        aria-haspopup=\"true\"\r\n        onClick={ handleAccoutClick }\r\n      >\r\n        <AccountCircleIcon className={ classes.icon } />\r\n      </IconButton>\r\n      <StyledMenu\r\n        id=\"long-menu\"\r\n        anchorEl={ anchorEl }\r\n        keepMounted\r\n        open={ open }\r\n        onClose={ handleAccountClose }\r\n        PaperProps={ {\r\n          style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5,\r\n            width: '20ch',\r\n          },\r\n        } }\r\n      >\r\n        { options.map( ( option ) => (\r\n          <Link to={ option[ 1 ] } key={ option[ 0 ] } className={ classes.Link }>\r\n            <MenuItem value={ option[ 0 ] } selected={ option[ 0 ] === 'Pyxis' } onClick={ handleAccountMenuClick }>\r\n              { option[ 0 ] }\r\n            </MenuItem>\r\n          </Link>\r\n        ) ) }\r\n      </StyledMenu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LongMenu;","import * as API from '../api';\r\nimport { snackbarActionManager } from './snackbarActions';\r\nimport AddProductMessages from '../api/constants';\r\n\r\ninterface Action\r\n{\r\n    type: string;\r\n    payload: [];\r\n}\r\n\r\ninterface Product\r\n{\r\n    name: string;\r\n    price: number;\r\n    description?: string;\r\n    details?: string;\r\n    sale?: number;\r\n    stock?: number;\r\n    src: string;\r\n}\r\n\r\n\r\n\r\n//get request of products state\r\nconst fetchProducts = () => async ( dispatch: any ) =>\r\n{\r\n\r\n    try\r\n    {\r\n        const response = await ( await API.fetchProducts() ).json();\r\n        dispatch( { type: 'GET', payload: response.products } );\r\n        dispatch( loaded() );\r\n    } catch ( error )\r\n    {\r\n        dispatch( { type: 'GET', payload: [] } );\r\n        //signal that all products are loaded and no refresh is needed\r\n        dispatch( loaded() );\r\n        dispatch( snackbarActionManager.hide() );\r\n        dispatch( snackbarActionManager.show( { message: \"Connection failed\", variant: 'error' } ) );\r\n        console.log( error );\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\n//single item post request for product items\r\nconst postProduct = ( product: FormData ) => async ( dispatch: any ) =>\r\n{\r\n    try\r\n    {\r\n        const response = await ( await API.postProduct( product ) ).json();\r\n\r\n        if ( response.status === \"success\" )\r\n        {\r\n            console.log( response.status );\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: response.message, variant: 'success' } ) );\r\n        }\r\n        else\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: response.message, variant: 'warning' } ) );\r\n        }\r\n\r\n        console.log( response );\r\n        //signal the app that not all products are loaded\r\n        dispatch( dump() );\r\n        dispatch( { type: \"ADD-PRODUCT\", payload: response.product } );\r\n        //refresh all products\r\n        dispatch( fetchProducts() );\r\n    } catch ( error )\r\n    {\r\n        if ( error.message === 'Request failed with status code 409' )\r\n        {\r\n            dispatch( snackbarActionManager.show( { message: AddProductMessages.conflict, variant: 'error' } ) );\r\n        } else\r\n        {\r\n            dispatch( snackbarActionManager.show( { message: AddProductMessages.fail, variant: 'error' } ) );\r\n        }\r\n        console.log( error.message );\r\n    }\r\n};\r\n\r\n\r\n//multiple items post request for products state\r\nconst postProducts = ( products: Array<FormData> ) => async ( dispatch: any ) =>\r\n{\r\n    try\r\n    {\r\n        const { data } = await API.postProducts( products );\r\n        if ( data.status === \"success\" )\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: data.message, variant: 'success' } ) );\r\n\r\n        }\r\n        else\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: data.message, variant: 'warning' } ) );\r\n        }\r\n        console.log( data );\r\n        //signal the app that not all products are loaded\r\n        dispatch( dump() );\r\n        dispatch( { type: \"ADD-PRODUCTS\", payload: data } );\r\n        //refresh all products\r\n        dispatch( fetchProducts() );\r\n    } catch ( error )\r\n    {\r\n        if ( error.message === 'Request failed with status code 409' )\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: AddProductMessages.conflict, variant: 'error' } ) );\r\n        } else\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: AddProductMessages.fail, variant: 'error' } ) );\r\n        }\r\n        console.log( error.message );\r\n    }\r\n};\r\n\r\n\r\n//singe item update request for products state\r\nconst updateProduct = ( id: 'string', product: Product ) => async ( dispatch: any ) =>\r\n{\r\n    try\r\n    {\r\n        const { data } = await API.patchProduct( id, product );\r\n        console.log( data );\r\n        if ( data.status === \"success\" )\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: data.message, variant: 'success' } ) );\r\n\r\n        }\r\n        else\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: data.message, variant: 'warning' } ) );\r\n        }\r\n        dispatch( { type: 'UPDATE', payload: data } );\r\n        dispatch( fetchProducts() );\r\n    } catch ( error )\r\n    {\r\n        dispatch( snackbarActionManager.hide() );\r\n        dispatch( snackbarActionManager.show( { message: AddProductMessages.fail, variant: 'error' } ) );\r\n        console.log( error );\r\n    }\r\n};\r\n\r\n// single item delete for products state\r\nconst deleteProduct = ( id: string ) => async ( dispatch: any ) =>\r\n{\r\n    try\r\n    {\r\n        const { data } = await API.deleteProduct( id );\r\n        console.log( data );\r\n        if ( data.status === \"success\" )\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: data.message, variant: 'success' } ) );\r\n\r\n        }\r\n        else\r\n        {\r\n            dispatch( snackbarActionManager.hide() );\r\n            dispatch( snackbarActionManager.show( { message: data.message, variant: 'warning' } ) );\r\n        }\r\n        dispatch( { type: 'DELETE', payload: id } );\r\n    } catch ( error )\r\n    {\r\n        console.log( error );\r\n    }\r\n};\r\n\r\n//productsAreLoaded -> true\r\nconst loaded = () =>\r\n{\r\n    return {\r\n        type: 'LOADED',\r\n    };\r\n};\r\n\r\n\r\n//productsAreLoaded -> false\r\nconst dump = () =>\r\n{\r\n    return {\r\n        type: \"DUMP\",\r\n    };\r\n};\r\n\r\n\r\n/*\r\n@productsActions = object that contains all redux actions that interacts with products\r\nincluding API calls that return products objects\r\n*/\r\nconst productsActions = { get: fetchProducts, post: postProduct, multipost: postProducts, update: updateProduct, delete: deleteProduct, load: loaded, dump: dump };\r\n\r\nexport { productsActions };","import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport\r\n{\r\n    Card,\r\n    CardHeader,\r\n    IconButton,\r\n    CardMedia,\r\n    CardContent,\r\n    Typography,\r\n    CardActions,\r\n    Collapse,\r\n\r\n} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { red } from '@material-ui/core/colors';\r\nimport BrokenImageIcon from '@material-ui/icons/BrokenImage';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { productsActions } from '../actions';\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n    root: {\r\n        width: '100%',\r\n        [ theme.breakpoints.up( 'md' ) ]: {\r\n            maxWidth: 345,\r\n        }\r\n    },\r\n    media: {\r\n        display: 'flex',\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create( 'transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        } ),\r\n    },\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[ 500 ],\r\n    },\r\n    description: {\r\n        overflow: 'hidden',\r\n        // wordWrap: 'normal'\r\n    },\r\n    icon: {\r\n        top: '-90px',\r\n        position: 'relative',\r\n    }\r\n} ) );\r\n\r\n//@params: @active = activates the action buttons when #PROTO-DISPLAY\r\ninterface Props\r\n{\r\n    _id: string;\r\n    name: string;\r\n    description?: string;\r\n    details?: string;\r\n    promotion?: string | number;\r\n    price: number;\r\n    piecesLeft?: number;\r\n    src?: string;\r\n    active: boolean;\r\n}\r\n\r\n\r\n//TODO documnet this component\r\n//@component that renders the card component of a product\r\nconst ProductCard = ( props: Props ) =>\r\n{\r\n\r\n    const dispatch = useDispatch();\r\n    //bruteforce state of login\r\n    const isLogged = useSelector( ( state: any ) => state.isLogged );\r\n    const classes = useStyles();\r\n    const {\r\n        _id,\r\n        name,\r\n        description,\r\n        details,\r\n        promotion,\r\n        price,\r\n        piecesLeft,\r\n        active,\r\n        src\r\n    } = props;\r\n\r\n    //@details block expand state\r\n    const [ expanded, setExpanded ] = useState( false );\r\n\r\n\r\n    //@expands the details block inside card\r\n    const handleExpandClick = () =>\r\n    {\r\n        setExpanded( !expanded );\r\n    };\r\n\r\n    //@deletes the current item using the ID only if the card is active(in admin/ only)\r\n    const deteleItemHandler = ( id: string ) =>\r\n    {\r\n        if ( active )\r\n        {\r\n            dispatch( productsActions.delete( id ) );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card className={ classes.root }>\r\n            <CardHeader\r\n                action={\r\n                    active ?\r\n                        <Link to={ `/admin/product/${ _id }` }>\r\n                            <IconButton aria-label=\"settings\">\r\n                                <MoreVertIcon />\r\n                            </IconButton>\r\n                        </Link> :\r\n                        <IconButton aria-label=\"settings\">\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                }\r\n                title={ name }\r\n                subheader={ `${ price } RON` }\r\n            />\r\n\r\n\r\n            <CardMedia\r\n                className={ classes.media }\r\n                children={ src ? null : <BrokenImageIcon className={ classes.icon } /> }\r\n                image={ src }\r\n                title=\"asd\"\r\n            />\r\n\r\n\r\n            <CardContent className={ classes.description }>\r\n                <Typography variant=\"body2\" display='block' color=\"textSecondary\" component=\"p\">\r\n                    { description }\r\n                </Typography>\r\n            </CardContent>\r\n\r\n\r\n            <CardActions disableSpacing>\r\n                { isLogged ?\r\n                    <IconButton aria-label=\"add to favorites\">\r\n                        <FavoriteIcon />\r\n                    </IconButton> :\r\n                    null }\r\n\r\n                <IconButton aria-label=\"delete\" onClick={ () => deteleItemHandler( _id ) }>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n\r\n\r\n                <IconButton aria-label=\"share\">\r\n                    <AddShoppingCartIcon />\r\n                </IconButton>\r\n\r\n\r\n                { details ?\r\n                    <IconButton\r\n                        className={ clsx( classes.expand, {\r\n                            [ classes.expandOpen ]: expanded,\r\n                        } ) }\r\n                        onClick={ handleExpandClick }\r\n                        aria-expanded={ expanded }\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton> : null }\r\n\r\n\r\n            </CardActions>\r\n\r\n\r\n            <Collapse in={ expanded } timeout=\"auto\" unmountOnExit>\r\n                <CardContent>\r\n                    <Typography variant=\"body2\" component='p' gutterBottom display='block' color=\"textSecondary\">\r\n                        { details }\r\n                    </Typography>\r\n                </CardContent>\r\n            </Collapse>\r\n\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ProductCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Card from '../ProductCard';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, CircularProgress } from '@material-ui/core';\r\nimport { productsActions } from '../../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport SignalCellularNoSimOutlinedIcon from '@material-ui/icons/SignalCellularNoSimOutlined';\r\n\r\ninterface Product extends Document\r\n{\r\n    _id: string;\r\n    name: string,\r\n    price: number,\r\n    description?: string,\r\n    details?: string,\r\n    sale?: number,\r\n    stock: number,\r\n    src: string,\r\n}\r\n\r\nconst useStyles = makeStyles( () => ( {\r\n    root: {\r\n        paddingTop: 20,\r\n    },\r\n    item: {\r\n        textAlign: 'center'\r\n    },\r\n    loading: {\r\n        height: '90vh',\r\n    },\r\n    icon: {\r\n        fontSize: '25rem',\r\n        opacity: '.3',\r\n    }\r\n} ) );\r\n\r\n//@main overview component, the startpoint of the website\r\nconst Home = () =>\r\n{\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const areProductsLoaded = useSelector( ( state: any ) =>\r\n    {\r\n        return state.productsAreLoaded;\r\n    } );\r\n    const products = useSelector( ( state: any ) =>\r\n    {\r\n        return state.products;\r\n    } );\r\n\r\n\r\n    //@fetch products API call\r\n    useEffect( () =>\r\n    {\r\n        /*\r\n        @productsActions = object that contains all redux actions that interacts with products\r\n        including API calls that return products objects\r\n        */\r\n        if ( !areProductsLoaded )\r\n            dispatch( productsActions.get() );\r\n\r\n    }, [] );\r\n\r\n    console.log( products );\r\n\r\n    //@list of the products presented in main menu\r\n    const items = products.map( ( product: Product ) =>\r\n        <Grid item xs={ 12 } md={ 4 } key={ product._id }>\r\n            <Card\r\n                _id={ product._id }\r\n                name={ product.name }\r\n                price={ product.price }\r\n                description={ product.description }\r\n                details={ product.details }\r\n                piecesLeft={ product.stock }\r\n                promotion={ product.sale }\r\n                src={ product.src }\r\n                active={ true }\r\n            />\r\n        </Grid>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !areProductsLoaded\r\n                    ?\r\n                    ( products.length\r\n                        ?\r\n                        <Grid className={ classes.root } container justify='center' alignItems='center' spacing={ 2 }>\r\n                            { items }\r\n                            {/* loading animation after last product in the list until the new array of products is loaded */ }\r\n                            <Grid item xs={ 12 } md={ 4 }>\r\n                                <CircularProgress />\r\n                            </Grid>\r\n                        </Grid>\r\n                        :\r\n                        // loading animation for all products\r\n                        <Grid className={ classes.loading } container justify='center' alignItems='center' spacing={ 2 }>\r\n                            <CircularProgress />\r\n                        </Grid> )\r\n                    :\r\n                    products.length\r\n                        ?\r\n                        //displaying all products with no loading involved\r\n                        ( <Grid className={ classes.root } container spacing={ 2 }>\r\n                            { items }\r\n                        </Grid> )\r\n                        :\r\n                        (\r\n                            //when the products array is empty(or maybe when you have a connection issue)\r\n                            <Grid className={ classes.loading } container justify='center' alignContent='center'>\r\n                                <SignalCellularNoSimOutlinedIcon className={ classes.icon } />\r\n                            </Grid>\r\n                        )\r\n            }\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","enum FieldSelector\r\n{\r\n    name = \"NAME\",\r\n    desc = \"DESCRIPTION\",\r\n    details = \"DETAILS\",\r\n    prom = \"PROMOTION\",\r\n    price = \"PRICE\",\r\n    stock = \"PIECES\",\r\n    src = \"SRC\",\r\n}\r\n\r\nexport { FieldSelector };","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n    title: {\r\n        display: 'none',\r\n        [ theme.breakpoints.up( 'sm' ) ]: {\r\n            display: 'block',\r\n            minWidth: '180px',\r\n            marginRight: '30px',\r\n        },\r\n        userSelect: 'none',\r\n        fontWeight: 'bold'\r\n    },\r\n} ) );\r\n\r\n//Just a display component\r\nconst Logo = () =>\r\n{\r\n    const classes = useStyles();\r\n    return (\r\n        <Typography variant=\"h5\" className={ classes.title }>\r\n            Logo\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\r\nimport QueueRoundedIcon from '@material-ui/icons/QueueRounded';\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n    List: {\r\n        padding: 0,\r\n        display: 'none',\r\n        [ theme.breakpoints.up( 'md' ) ]: {\r\n            display: 'flex',\r\n        },\r\n        listStyle: 'none',\r\n        margin: 0,\r\n    },\r\n    navLink: {\r\n        '&:hover': {\r\n            padding: '12px 12px 10px 12px',\r\n            borderBottom: '2px solid #262626',\r\n            cursor: 'pointer',\r\n        }\r\n    },\r\n    Link: {\r\n        color: '#fafafa',\r\n        textDecoration: 'none',\r\n        userSelect: 'none',\r\n        padding: '12px',\r\n        '&:hover': {\r\n            padding: '12px 12px 10px 12px',\r\n            borderBottom: '2px solid #fafafa',\r\n            cursor: 'pointer',\r\n        }\r\n    },\r\n\r\n    icon: {\r\n        position: 'relative',\r\n        top: '5px',\r\n    }\r\n} ) );\r\n\r\n\r\n//@routing menu component: here you find all the link in the nav menu\r\nconst NavMenu = () =>\r\n{\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid container>\r\n            <ul className={ classes.List }>\r\n                <Link className={ classes.Link } to='/'>\r\n                    <li><span><HomeRoundedIcon className={ classes.icon } /></span> Home</li>\r\n                </Link>\r\n                <Link className={ classes.Link } to='/admin/add-product'>\r\n                    <li><span><QueueRoundedIcon className={ classes.icon } /></span> Add Product</li>\r\n                </Link>\r\n            </ul >\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default NavMenu;","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n    menuButton: {\r\n        marginRight: theme.spacing( 2 ),\r\n        display: 'block',\r\n        [ theme.breakpoints.up( 'md' ) ]: {\r\n            display: 'none'\r\n        }\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n\r\n} ) );\r\n\r\ninterface Props\r\n{\r\n    drowerOpen: () => void;\r\n    open: boolean;\r\n}\r\n\r\nconst DrowerMenuButton: React.FC<Props> = ( props: Props ) =>\r\n{\r\n    const classes = useStyles();\r\n    return (\r\n        <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={ props.drowerOpen }\r\n            edge=\"start\"\r\n            className={ clsx( classes.menuButton, props.open && classes.hide ) }\r\n        >\r\n            <MenuIcon />\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default DrowerMenuButton;","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create( [ 'margin', 'width' ], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        } ),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${ drawerWidth }px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create( [ 'margin', 'width' ], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        } ),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing( 2 ),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing( 0, 1 ),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing( 3 ),\r\n        transition: theme.transitions.create( 'margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        } ),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create( 'margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        } ),\r\n        marginLeft: 0,\r\n    },\r\n    Link: {\r\n        color: '#262626',\r\n        textDecoration: 'none',\r\n        userSelect: 'none'\r\n    }\r\n} ) );\r\n\r\n//@valid:mobile only / @params: open = state of open/close of the side menu() / closeMenu = closing the menu()\r\ninterface Props\r\n{\r\n    open: boolean;\r\n    closeMenu: () => void;\r\n}\r\n\r\n\r\n// @menu that apears on mobile\r\nconst DrowerMenu: React.FC<Props> = ( props: Props ) =>\r\n{\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const { open, closeMenu } = props;\r\n    return (\r\n        <Drawer\r\n            className={ classes.drawer }\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={ open }\r\n            classes={ {\r\n                paper: classes.drawerPaper,\r\n            } }\r\n        >\r\n            <div className={ classes.drawerHeader }>\r\n                <IconButton onClick={ closeMenu }>\r\n                    { theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon /> }\r\n                </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n                { [ 'Home', 'Add Product' ].map( ( text ) =>\r\n                {\r\n                    let path = '';\r\n                    switch ( text )\r\n                    {\r\n                        case 'Home':\r\n                            path = '/';\r\n                            break;\r\n                        case 'Add Product':\r\n                            path = '/admin/add-product';\r\n                            break;\r\n                        default: {\r\n                            path = '/nothing';\r\n                        }\r\n                    }\r\n                    return (\r\n                        <Link className={ classes.Link } to={ path } key={ text } onClick={ closeMenu }>\r\n                            <ListItem button key={ text }>\r\n                                <ListItemText primary={ text } />\r\n                            </ListItem>\r\n                        </Link>\r\n                    );\r\n                } ) }\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                { [ 'Send mail', 'Account' ].map( ( text ) => (\r\n                    <ListItem button key={ text } onClick={ closeMenu }>\r\n                        <ListItemText primary={ text } />\r\n                    </ListItem>\r\n                ) ) }\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default DrowerMenu;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n    grow: {\r\n        display: 'flex',\r\n        [ theme.breakpoints.up( 'lg' ) ]: {\r\n            display: 'none',\r\n        },\r\n        flexGrow: 1,\r\n    }\r\n} ) );\r\n\r\n\r\n//@bassically a flex grow component\r\nconst Spacer = () =>\r\n{\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={ classes.grow }></div>\r\n    );\r\n};\r\n\r\nexport default Spacer;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Account from './AccountButton';\r\nimport Logo from './Logo';\r\nimport NavMenu from './NavMenu';\r\nimport DrowerMenuButton from './DrowerMenuButton';\r\nimport DrowerMenu from './DrowerMenu';\r\nimport Spacer from './Spacer';\r\n\r\n\r\nconst useStyles = makeStyles( ( theme ) => ( {\r\n  relative: {\r\n    position: 'relative',\r\n    [ theme.breakpoints.up( 'lg' ) ]: {\r\n      minHeight: '48px'\r\n    },\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  growMobile: {\r\n    display: 'flex',\r\n    [ theme.breakpoints.up( 'lg' ) ]: {\r\n      display: 'none',\r\n    },\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing( 2 ),\r\n  },\r\n\r\n  sectionDesktop: {\r\n    display: 'none',\r\n    [ theme.breakpoints.up( 'md' ) ]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: 'flex',\r\n    [ theme.breakpoints.up( 'md' ) ]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  invisible: {\r\n    display: 'none',\r\n  }\r\n} ) );\r\n\r\nconst GoldAppBar = withStyles( ( theme ) => ( {\r\n  root: {\r\n    color: '#fafafa',\r\n    backgroundColor: '#02203c',\r\n    boxShadow: 'none',\r\n  },\r\n} ) )( AppBar );\r\n\r\ninterface Props\r\n{\r\n  isVisible: boolean;\r\n}\r\n\r\n//@entrypoint of the navbar component \r\nconst ButtonAppBar: React.FC<Props> = ( props: Props ) =>\r\n{\r\n  const classes = useStyles();\r\n  const { isVisible } = props;\r\n  const [ open, setOpen ] = React.useState( false );\r\n\r\n  const handleDrawerOpen = () =>\r\n  {\r\n    setOpen( true );\r\n  };\r\n\r\n  const handleDrawerClose = () =>\r\n  {\r\n    setOpen( false );\r\n  };\r\n\r\n  return (\r\n    <div className={ isVisible ? '' : classes.invisible } color=\"primary\">\r\n      <GoldAppBar position=\"sticky\">\r\n        <Toolbar className={ classes.relative }>\r\n          <DrowerMenuButton open={ open } drowerOpen={ handleDrawerOpen } />\r\n          <Logo />\r\n          <NavMenu />\r\n          <Spacer />\r\n          <Account />\r\n        </Toolbar>\r\n        <DrowerMenu open={ open } closeMenu={ handleDrawerClose } />\r\n      </GoldAppBar>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default ButtonAppBar;","interface Alert\r\n{\r\n    title: string,\r\n    content: string;\r\n}\r\n\r\nexport const NoSrcAlert: Alert = {\r\n    title: 'No image for product!',\r\n    content: 'Are you sure you want to save this product without a picture?'\r\n};","import React, { Dispatch, SetStateAction } from 'react';\r\nimport { TextField, Grid, Button, IconButton } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport BrokenImageIcon from '@material-ui/icons/BrokenImage';\r\n\r\n\r\nimport { FieldSelector, NoSrcAlert } from '../constants';\r\n\r\n\r\nconst useStyles = makeStyles( ( theme: Theme ) => ( {\r\n    textFieldWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    textField: {\r\n        width: '95%',\r\n        [ theme.breakpoints.up( 'md' ) ]: {\r\n            width: '100%'\r\n        }\r\n    },\r\n    button: {\r\n        margin: theme.spacing( 1 ),\r\n        width: 200\r\n    },\r\n    buttonWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    alertField: {\r\n        '&>label': {\r\n            color: 'red'\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottom: '1px solid red'\r\n        }\r\n    },\r\n    activeButton: {\r\n        color: 'rgba( 0, 0, 0, 1 ) !important'\r\n    }\r\n} ) );\r\n\r\ninterface Props\r\n{\r\n    name: string;\r\n    description: string;\r\n    details: string;\r\n    promotion: string | number;\r\n    price: number;\r\n    pieces: number;\r\n    src: string;\r\n    removeImage: () => void;\r\n    change: ( target: ( HTMLInputElement | HTMLTextAreaElement ), id: FieldSelector ) => void;\r\n    clear: () => void;\r\n    send: ( ev: any ) => void;\r\n\r\n    //fields checkers\r\n    fieldWarnings: { name: boolean, price: boolean, description: boolean; };\r\n    checkFields: () => boolean;\r\n\r\n    //dialog props\r\n\r\n    openDialog: ( title: string, content: string ) => void;\r\n}\r\n\r\nconst Form = ( props: Props ) =>\r\n{\r\n    const { name,\r\n        description,\r\n        details,\r\n        promotion,\r\n        pieces,\r\n        price,\r\n        change,\r\n        clear,\r\n        send,\r\n        fieldWarnings,\r\n        src,\r\n        openDialog,\r\n        checkFields,\r\n        removeImage,\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n    return (\r\n        <Grid container spacing={ 1 } justify=\"center\">\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ `${ classes.textField } ${ fieldWarnings.name ? classes.alertField : '' }` }\r\n                    label=\"Name*\"\r\n                    type=\"text\"\r\n                    value={ name }\r\n                    onChange={ ev => change( ev.target, FieldSelector.name ) }\r\n                />\r\n            </Grid>\r\n            <Grid item xs={ 12 } md={ 6 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ `${ classes.textField } ${ fieldWarnings.price ? classes.alertField : '' }` }\r\n                    label=\"Price*(RON)\"\r\n                    type=\"number\"\r\n                    InputLabelProps={ {\r\n                        shrink: true,\r\n                    } }\r\n                    value={ price }\r\n                    onFocus={ ( ev ) => ev.target.select() }\r\n                    onChange={ ev => change( ev.target, FieldSelector.price ) }\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } md={ 6 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ classes.textField }\r\n                    label=\"Promotion(%)\"\r\n                    type=\"number\"\r\n                    value={ promotion }\r\n                    InputLabelProps={ {\r\n                        shrink: true,\r\n                    } }\r\n                    onFocus={ ( ev ) => ev.target.select() }\r\n                    onChange={ ev => change( ev.target, FieldSelector.prom ) }\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ classes.textField }\r\n                    label=\"Pieces\"\r\n                    type=\"number\"\r\n                    value={ pieces }\r\n                    InputLabelProps={ {\r\n                        shrink: true,\r\n                    } }\r\n                    onFocus={ ( ev ) => ev.target.select() }\r\n                    onChange={ ev => change( ev.target, FieldSelector.stock ) }\r\n                />\r\n            </Grid>\r\n\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ `${ classes.textField } ${ fieldWarnings.description ? classes.alertField : '' }` }\r\n                    label=\"Description*\"\r\n                    value={ description }\r\n                    onChange={ ev => change( ev.target, FieldSelector.desc ) }\r\n                    rows={ 3 }\r\n                    multiline\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ classes.textField }\r\n                    label=\"Details\"\r\n                    value={ details }\r\n                    onChange={ ev => change( ev.target, FieldSelector.details ) }\r\n                    rows={ 3 }\r\n                    multiline\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <Grid container spacing={ 1 } justify=\"center\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                    >\r\n                        Select File\r\n                            <input\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            onChange={ ev => change( ev.target, FieldSelector.src ) }\r\n                            hidden\r\n                        />\r\n                    </Button>\r\n                    <IconButton disabled={ src ? false : true } onClick={ removeImage } className={ `${ src ? classes.activeButton : '' }` }>\r\n                        <BrokenImageIcon />\r\n                    </IconButton>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            <Grid container>\r\n                <Grid item xs={ 6 } className={ classes.buttonWrapper }>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={ classes.button }\r\n                        startIcon={ <PublishIcon /> }\r\n                        onClick={ ( ev ) =>\r\n                        {\r\n                            if ( checkFields() )\r\n                            {\r\n                                if ( src ) { send( ev ); }\r\n                                else { openDialog( NoSrcAlert.title, NoSrcAlert.content ); }\r\n                            }\r\n\r\n                        } }\r\n                    >\r\n                        Upload\r\n                    </Button>\r\n                </Grid>\r\n\r\n                <Grid item xs={ 6 } className={ classes.buttonWrapper }>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        className={ classes.button }\r\n                        startIcon={ <DeleteIcon /> }\r\n                        onClick={ clear }\r\n                    >\r\n                        Clear\r\n                    </Button>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, Dispatch, SetStateAction } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n\r\ninterface Props\r\n{\r\n    title: string,\r\n    content: string,\r\n    yes: ( ev: any ) => void;\r\n    no?: () => void | null;\r\n    open: boolean;\r\n    setOpen: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n\r\nconst AlertDialog: React.FC<Props> = ( props: Props ) =>\r\n{\r\n    // const [ open, setOpen ] = useState( false );\r\n\r\n    const { title, content, yes, no, open, setOpen } = props;\r\n\r\n    // const handleClickOpen = () =>\r\n    // {\r\n    //     setOpen( true );\r\n    // };\r\n\r\n    const handleClose = () =>\r\n    {\r\n        setOpen( false );\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={ open }\r\n            onClose={ handleClose }\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{ title }</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    { content }\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={ no ? () => { no(); handleClose(); } : handleClose } color=\"primary\">\r\n                    No\r\n          </Button>\r\n                <Button onClick={ yes ? ( ev ) => { yes( ev ); handleClose(); } : handleClose } color=\"primary\" autoFocus>\r\n                    Yes\r\n          </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default AlertDialog;","import React, { useEffect, useState } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Item from './Item';\r\nimport Form from './Form';\r\nimport Card from '../../ProductCard';\r\nimport { useDispatch } from 'react-redux';\r\nimport AddProductMessages from '../../../api/constants';\r\nimport Dialog from '../../AlertDialog';\r\n\r\n\r\n//@object that contains all global state product actions(including API calls)\r\nimport { productsActions } from '../../../actions';\r\n\r\n//@enum of commands for form fileds\r\nimport { FieldSelector } from '../constants';\r\n\r\n\r\nconst useStyles = makeStyles( ( theme: Theme ) => ( {\r\n    root: {\r\n        paddingTop: '3rem',\r\n    }\r\n} ) );\r\n\r\ninterface Product\r\n{\r\n    name: string;\r\n    price: number;\r\n    description?: string;\r\n    details?: string;\r\n    sale?: number;\r\n    stock?: number;\r\n    src: string;\r\n}\r\n\r\ninterface Props\r\n{\r\n\r\n}\r\n\r\nconst ProductAdder: React.FC<Props> = ( props: Props ) =>\r\n{\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    // Form states\r\n    const [ cardName, setCardName ] = useState( '' );\r\n    const [ cardDescription, setCardDescription ] = useState( '' );\r\n    const [ cardDetails, setCardDetails ] = useState( '' );\r\n    const [ cardPromotion, setCardPromotion ] = useState( 0 );\r\n    const [ cardPrice, setCardPrice ] = useState( 0 );\r\n    const [ cardPieces, setCardPieces ] = useState( 0 );\r\n    const [ cardSrc, setCardSrc ] = useState( null );\r\n    const [ fakeSrc, setFakeSrc ] = useState( '' );\r\n\r\n    // Mandatory fields alerts\r\n    const [ fieldWarnings, setFieldWarnings ] = useState( { name: false, description: false, price: false } );\r\n\r\n\r\n\r\n    //Dialog states\r\n\r\n    const [ openAlert, setOpenAlert ] = useState( false );\r\n    const [ titleAlert, setTitleAlert ] = useState( '' );\r\n    const [ contentAlert, setContentAlert ] = useState( '' );\r\n\r\n    //opens the dialog and sets the title and content inside the componenet\r\n    const openDialog = ( title: string, content: string ) =>\r\n    {\r\n        setTitleAlert( title );\r\n        setContentAlert( content );\r\n        setOpenAlert( true );\r\n    };\r\n\r\n    //transforms the image file into base64 string sets it in src state\r\n    const setImage = ( file: File ) =>\r\n    {\r\n        const reader = new FileReader();\r\n        if ( file )\r\n        {\r\n            setCardSrc( file );\r\n            reader.readAsDataURL( file );\r\n            reader.onload = () =>\r\n            {\r\n                const base64 = reader.result;\r\n                setFakeSrc( base64.toString() );\r\n            };\r\n        }\r\n\r\n    };\r\n\r\n    //resets src state\r\n    const removeImage = () =>\r\n    {\r\n        setCardSrc( '' );\r\n    };\r\n\r\n    // handles all changes in the form and updates the fake product card\r\n    // @params: @ev: the event that provides us the target input\r\n    // @params: @identifier: the string that feeds switch structure witch selects the setState function\r\n    // @params: @forced: a boolean that can bypass in some cases the target grabbing from the eveny(mainly used on src)\r\n    const handleChanges = ( target: HTMLInputElement | HTMLTextAreaElement, identifier: FieldSelector ) =>\r\n    {\r\n        switch ( identifier )\r\n        {\r\n            case FieldSelector.name:\r\n                setCardName( target.value );\r\n                if ( fieldWarnings.name )\r\n                {\r\n                    setFieldWarnings( { ...fieldWarnings, name: false } );\r\n                }\r\n                break;\r\n            case FieldSelector.desc:\r\n                setCardDescription( target.value );\r\n                if ( fieldWarnings.description )\r\n                {\r\n                    setFieldWarnings( { ...fieldWarnings, description: false } );\r\n                }\r\n                break;\r\n            case FieldSelector.details:\r\n                setCardDetails( target.value );\r\n                break;\r\n            case FieldSelector.prom:\r\n                if ( target.value === '' )\r\n                {\r\n                    setCardPromotion( 0 );\r\n                    break;\r\n                }\r\n                setCardPromotion( parseInt( target.value ) );\r\n                break;\r\n            case FieldSelector.price:\r\n                if ( target.value === '' )\r\n                {\r\n                    setCardPrice( 0 );\r\n                    break;\r\n                }\r\n                setCardPrice( parseInt( target.value ) );\r\n                if ( fieldWarnings.price )\r\n                {\r\n                    setFieldWarnings( { ...fieldWarnings, price: false } );\r\n                }\r\n                break;\r\n            case FieldSelector.stock:\r\n                if ( target.value === '' )\r\n                {\r\n                    setCardPieces( 0 );\r\n                    break;\r\n                }\r\n                setCardPieces( parseInt( target.value ) );\r\n                break;\r\n            case FieldSelector.src:\r\n                if ( 'files' in target )\r\n                    setImage( target.files[ 0 ] );\r\n                break;\r\n        }\r\n\r\n    };\r\n\r\n    // TODO make it abe to send multiple items\r\n\r\n\r\n    const checkFields = () =>\r\n    {\r\n        if ( cardName && cardDescription && cardPrice )\r\n        {\r\n            return true;\r\n        }\r\n        const tempWarnings = { ...fieldWarnings };\r\n        if ( !cardName )\r\n        {\r\n            tempWarnings.name = true;\r\n        }\r\n\r\n        if ( !cardDescription )\r\n        {\r\n            tempWarnings.description = true;\r\n        }\r\n\r\n        if ( !cardPrice )\r\n        {\r\n            tempWarnings.price = true;\r\n        }\r\n\r\n        setFieldWarnings( tempWarnings );\r\n        return false;\r\n    };\r\n\r\n    const handleSubmit = ( ev: any ) =>\r\n    {\r\n        ev.preventDefault();\r\n\r\n        const newProduct: any = {\r\n            name: cardName,\r\n            price: cardPrice,\r\n            description: cardDescription,\r\n            details: cardDetails,\r\n            sale: cardPromotion,\r\n            stock: cardPieces,\r\n            src: cardSrc,\r\n        };\r\n\r\n        const form = new FormData();\r\n\r\n        for ( let key of Object.keys( newProduct ) )\r\n        {\r\n            form.append( key, newProduct[ key ] );\r\n        }\r\n\r\n\r\n        dispatch( productsActions.post( form ) );\r\n\r\n\r\n        //marking the mandatory fields that are not completed\r\n\r\n\r\n\r\n\r\n    };\r\n\r\n    const clearProductDetails = () =>\r\n    {\r\n        setCardName( '' );\r\n        setCardPrice( 0 );\r\n        setCardPieces( 0 );\r\n        setCardPromotion( 0 );\r\n        setCardDescription( '' );\r\n        setCardDetails( '' );\r\n        setCardSrc( null );\r\n        setFieldWarnings( { name: false, price: false, description: false } );\r\n    };\r\n\r\n\r\n    return (\r\n        <Grid container spacing={ 3 } className={ classes.root }>\r\n            <Grid item xs={ 12 } md={ 7 }>\r\n                {/* PROTO-DISPLAY */ }\r\n                <Card\r\n                    _id=''\r\n                    name={ cardName }\r\n                    description={ cardDescription }\r\n                    details={ cardDetails }\r\n                    promotion={ cardPromotion }\r\n                    price={ cardPrice }\r\n                    piecesLeft={ cardPieces }\r\n                    src={ fakeSrc }\r\n                    active={ false }\r\n                />\r\n            </Grid>\r\n            <Grid item xs={ 12 } md={ 5 }>\r\n                <Form\r\n                    name={ cardName }\r\n                    description={ cardDescription }\r\n                    details={ cardDetails }\r\n                    promotion={ cardPromotion }\r\n                    price={ cardPrice }\r\n                    pieces={ cardPieces }\r\n                    src={ cardSrc }\r\n                    change={ handleChanges }\r\n                    clear={ clearProductDetails }\r\n                    send={ handleSubmit }\r\n                    removeImage={ removeImage }\r\n\r\n                    //fields checkers\r\n                    fieldWarnings={ fieldWarnings }\r\n                    checkFields={ checkFields }\r\n\r\n                    //dialog params\r\n                    openDialog={ openDialog }\r\n                />\r\n            </Grid>\r\n\r\n\r\n            <Dialog\r\n                open={ openAlert }\r\n                title={ titleAlert }\r\n                content={ contentAlert }\r\n                yes={ handleSubmit }\r\n                setOpen={ setOpenAlert }\r\n            />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ProductAdder;\r\n","import React, { Dispatch, SetStateAction } from 'react';\r\nimport { TextField, Grid, Button, IconButton } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport RestoreRoundedIcon from '@material-ui/icons/RestoreRounded';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport BrokenImageIcon from '@material-ui/icons/BrokenImage';\r\n\r\nimport { FieldSelector, NoSrcAlert } from '../constants';\r\n\r\nconst useStyles = makeStyles( ( theme: Theme ) => ( {\r\n    textFieldWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    textField: {\r\n        width: '95%',\r\n        [ theme.breakpoints.up( 'md' ) ]: {\r\n            width: '100%'\r\n        }\r\n    },\r\n    button: {\r\n        margin: theme.spacing( 1 ),\r\n        width: 200\r\n    },\r\n    buttonWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    alertField: {\r\n        '&>label': {\r\n            color: 'red'\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottom: '1px solid red'\r\n        }\r\n    },\r\n    activeButton: {\r\n        color: 'rgba( 0, 0, 0, 1 ) !important'\r\n    }\r\n} ) );\r\n\r\ninterface Props\r\n{\r\n    name: string;\r\n    description: string;\r\n    details: string;\r\n    promotion: string | number;\r\n    price: number;\r\n    pieces: number;\r\n    src: string;\r\n    removeImage: () => void;\r\n    change: ( target: HTMLInputElement | HTMLTextAreaElement, id: FieldSelector, forced?: boolean ) => void;\r\n    reset: () => void;\r\n    update: ( ev: any ) => void;\r\n    fieldWarnings: { name: boolean, price: boolean, description: boolean, };\r\n    checkFields: () => boolean;\r\n    openDialog?: ( title: string, content: string ) => void;\r\n}\r\n\r\nconst Form = ( props: Props ) =>\r\n{\r\n    const { name, description, details, promotion, pieces, price, change, reset, update, removeImage, checkFields, fieldWarnings, src } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Grid container spacing={ 1 } justify=\"center\">\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ `${ classes.textField } ${ fieldWarnings.name ? classes.alertField : '' }` }\r\n                    label=\"Name\"\r\n                    type=\"text\"\r\n                    value={ name }\r\n                    onChange={ ev => change( ev.target, FieldSelector.name ) }\r\n                />\r\n            </Grid>\r\n            <Grid item xs={ 12 } md={ 6 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ `${ classes.textField } ${ fieldWarnings.price ? classes.alertField : '' }` }\r\n                    label=\"Price(RON)\"\r\n                    type=\"number\"\r\n                    InputLabelProps={ {\r\n                        shrink: true,\r\n                    } }\r\n                    value={ price }\r\n                    onFocus={ ( ev ) => ev.target.select() }\r\n                    onChange={ ev => change( ev.target, FieldSelector.price ) }\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } md={ 6 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ classes.textField }\r\n                    label=\"Promotion(%)\"\r\n                    type=\"number\"\r\n                    value={ promotion }\r\n                    InputLabelProps={ {\r\n                        shrink: true,\r\n                    } }\r\n                    onFocus={ ( ev ) => ev.target.select() }\r\n                    onChange={ ev => change( ev.target, FieldSelector.prom ) }\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ classes.textField }\r\n                    label=\"Pieces\"\r\n                    type=\"number\"\r\n                    value={ pieces }\r\n                    InputLabelProps={ {\r\n                        shrink: true,\r\n                    } }\r\n                    onFocus={ ( ev ) => ev.target.select() }\r\n                    onChange={ ev => change( ev.target, FieldSelector.stock ) }\r\n                />\r\n            </Grid>\r\n\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ `${ classes.textField } ${ fieldWarnings.description ? classes.alertField : '' }` }\r\n                    label=\"Description\"\r\n                    value={ description }\r\n                    onChange={ ev => change( ev.target, FieldSelector.desc ) }\r\n                    rows={ 3 }\r\n                    multiline\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <TextField\r\n                    className={ classes.textField }\r\n                    label=\"Details\"\r\n                    value={ details }\r\n                    onChange={ ev => change( ev.target, FieldSelector.details ) }\r\n                    rows={ 3 }\r\n                    multiline\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={ 12 } className={ classes.textFieldWrapper }>\r\n                <Grid container spacing={ 1 } justify=\"center\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                    >\r\n                        Select File\r\n                            <input\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            onChange={ ev => change( ev.target, FieldSelector.src ) }\r\n                            hidden\r\n                        />\r\n                    </Button>\r\n                    <IconButton disabled={ src ? false : true } className={ `${ src ? classes.activeButton : '' }` } onClick={ removeImage }>\r\n                        <BrokenImageIcon />\r\n                    </IconButton>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            <Grid container>\r\n                <Grid item xs={ 6 } className={ classes.buttonWrapper }>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={ classes.button }\r\n                        startIcon={ <SaveIcon /> }\r\n                        onClick={ ( ev ) => { if ( checkFields() ) { update( ev ); } } }\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Grid>\r\n\r\n                <Grid item xs={ 6 } className={ classes.buttonWrapper }>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        className={ classes.button }\r\n                        startIcon={ <RestoreRoundedIcon /> }\r\n                        onClick={ reset }\r\n                    >\r\n                        Reset\r\n                    </Button>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Grid, CircularProgress } from '@material-ui/core';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { productsActions, snackbarActionManager } from '../../../actions';\r\nimport axios from 'axios';\r\n\r\nimport Form from './Form';\r\nimport Card from '../../ProductCard';\r\nimport { FieldSelector, NoSrcAlert } from '../constants';\r\nimport Dialog from '../../AlertDialog';\r\nimport { start } from 'node:repl';\r\n\r\n\r\ninterface Product\r\n{\r\n    name: string;\r\n    price: number;\r\n    description?: string;\r\n    details?: string;\r\n    sale?: number;\r\n    stock?: number;\r\n    src: string;\r\n}\r\n\r\nconst useStyles = makeStyles( ( theme: Theme ) => ( {\r\n    root: {\r\n        marginTop: '4rem'\r\n    },\r\n    loading: {\r\n        height: '90vh',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n    }\r\n} ) );\r\n\r\ninterface Props\r\n{\r\n    match: any;\r\n}\r\n\r\nconst UpdateProduct = ( props: Props ) =>\r\n{\r\n    const { match } = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [ product, setProduct ] = useState( useSelector( ( state: any ) => state.products.filter( ( item: any ) => item._id === match.params.id )[ 0 ] ) );\r\n    const [ cardName, setCardName ] = useState( product ? product.name : '' );\r\n    const [ cardPrice, setCardPrice ] = useState( product ? product.price : 0 );\r\n    const [ cardDescription, setCardDescription ] = useState( product ? product.description : '' );\r\n    const [ cardDetails, setCardDetails ] = useState( product ? product.details : '' );\r\n    const [ cardPromotion, setCardPromotion ] = useState( product ? product.sale : 0 );\r\n    const [ cardPieces, setCardPieces ] = useState( product ? product.stock : 0 );\r\n    const [ cardSrc, setCardSrc ] = useState( product ? product.src : '' );\r\n\r\n\r\n    // Mandatory field alerts\r\n    const [ fieldWarnings, setFieldWarnings ] = useState( { name: false, description: false, price: false } );\r\n\r\n\r\n\r\n    //Dialog states\r\n\r\n    const [ openAlert, setOpenAlert ] = useState( false );\r\n    const [ titleAlert, setTitleAlert ] = useState( '' );\r\n    const [ contentAlert, setContentAlert ] = useState( '' );\r\n\r\n\r\n    const getProduct = async () =>\r\n    {\r\n        const newProduct = await ( await axios.get( `/products/${ match.params.id }` ) ).data.product;\r\n        setProduct( newProduct );\r\n        setCardName( newProduct.name );\r\n        setCardPrice( newProduct.price );\r\n        setCardDescription( newProduct.description );\r\n        setCardDetails( newProduct.details );\r\n        setCardPromotion( newProduct.sale );\r\n        setCardPieces( newProduct.stock );\r\n        setCardSrc( newProduct.src );\r\n    };\r\n\r\n    useEffect( () =>\r\n    {\r\n        ( async () =>\r\n        {\r\n            if ( !product )\r\n            {\r\n                console.log( 'start' );\r\n                await getProduct();\r\n            }\r\n        } )();\r\n    }, [] );\r\n\r\n\r\n    const checkFields = () =>\r\n    {\r\n        if ( cardName && cardDescription && cardPrice )\r\n        {\r\n            return true;\r\n        }\r\n        const tempWarnings = { ...fieldWarnings };\r\n        if ( !cardName )\r\n        {\r\n            tempWarnings.name = true;\r\n        }\r\n\r\n        if ( !cardDescription )\r\n        {\r\n            tempWarnings.description = true;\r\n        }\r\n\r\n        if ( !cardPrice )\r\n        {\r\n            tempWarnings.price = true;\r\n        }\r\n\r\n        setFieldWarnings( tempWarnings );\r\n        return false;\r\n    };\r\n\r\n\r\n    const setImage = ( file: any ) =>\r\n    {\r\n        const reader = new FileReader();\r\n        if ( file )\r\n        {\r\n            reader.readAsDataURL( file );\r\n            reader.onload = () =>\r\n            {\r\n                const base64 = reader.result;\r\n                setCardSrc( base64 );\r\n            };\r\n\r\n        }\r\n    };\r\n\r\n    const removeImage = () =>\r\n    {\r\n        setCardSrc( '' );\r\n    };\r\n\r\n\r\n    /* \r\n    Handles all changes in the form and updates the fake product card including the removal of warnings if you change the input \r\n    value of that corresponding field\r\n    */\r\n    const handleChanges = ( target: HTMLInputElement | HTMLTextAreaElement, identifier: FieldSelector ) =>\r\n    {\r\n        switch ( identifier )\r\n        {\r\n            case FieldSelector.name:\r\n                setCardName( target.value );\r\n                if ( fieldWarnings.name )\r\n                {\r\n                    setFieldWarnings( { ...fieldWarnings, name: false } );\r\n                }\r\n                break;\r\n            case FieldSelector.desc:\r\n                setCardDescription( target.value );\r\n                if ( fieldWarnings.description )\r\n                {\r\n                    setFieldWarnings( { ...fieldWarnings, description: false } );\r\n                }\r\n                break;\r\n            case FieldSelector.details:\r\n                setCardDetails( target.value );\r\n                break;\r\n            case FieldSelector.prom:\r\n                if ( target.value === '' )\r\n                {\r\n                    setCardPromotion( 0 );\r\n                    break;\r\n                }\r\n                setCardPromotion( parseInt( target.value ) );\r\n                break;\r\n            case FieldSelector.price:\r\n                if ( target.value === '' )\r\n                {\r\n                    setCardPrice( 0 );\r\n                    break;\r\n                }\r\n                setCardPrice( parseInt( target.value ) );\r\n                if ( fieldWarnings.price )\r\n                {\r\n                    setFieldWarnings( { ...fieldWarnings, price: false } );\r\n                }\r\n                break;\r\n            case FieldSelector.stock:\r\n                if ( target.value === '' )\r\n                {\r\n                    setCardPieces( 0 );\r\n                    break;\r\n                }\r\n                setCardPieces( parseInt( target.value ) );\r\n                break;\r\n            case FieldSelector.src:\r\n                if ( 'files' in target )\r\n                    setImage( target.files[ 0 ] );\r\n                break;\r\n        }\r\n\r\n    };\r\n\r\n    /** \r\n     * ! This function updates the product without any filters! Use it with caution! \r\n     * ! Use it only as dialog yes property \r\n     * */\r\n    const forcedUpdate = () =>\r\n    {\r\n        const updatedProduct: Product = {\r\n            name: cardName,\r\n            price: cardPrice,\r\n            description: cardDescription,\r\n            details: cardDetails,\r\n            sale: cardPromotion,\r\n            stock: cardPieces,\r\n            src: cardSrc,\r\n        };\r\n\r\n        dispatch( productsActions.update( product._id, updatedProduct ) );\r\n        getProduct();\r\n    };\r\n\r\n\r\n    // product update handler\r\n    const handleUpdate = ( ev: any ) =>\r\n    {\r\n        ev.preventDefault();\r\n        const updatedProduct: Product = {\r\n            name: cardName,\r\n            price: cardPrice,\r\n            description: cardDescription,\r\n            details: cardDetails,\r\n            sale: cardPromotion,\r\n            stock: cardPieces,\r\n            src: cardSrc,\r\n        };\r\n\r\n        if ( product )\r\n        {\r\n            const trim: Product = ( ( { name, price, description, details, sale, stock, src } ) =>\r\n                ( { name, price, description, details, sale, stock, src } ) )( product );\r\n\r\n            if ( JSON.stringify( trim ) == JSON.stringify( updatedProduct ) )\r\n            {\r\n                dispatch( snackbarActionManager.hide() );\r\n                dispatch( snackbarActionManager.show( { message: 'No updates registered', variant: 'info' } ) );\r\n            }\r\n            else\r\n            {\r\n                if ( cardSrc )\r\n                {\r\n                    dispatch( productsActions.update( product._id, updatedProduct ) );\r\n                    getProduct();\r\n                }\r\n                else\r\n                {\r\n                    openDialog( NoSrcAlert.title, NoSrcAlert.content );\r\n                }\r\n\r\n            }\r\n\r\n        } else\r\n        {\r\n            // dispatch( productsActions.post( updatedProduct ) );\r\n        }\r\n    };\r\n\r\n\r\n    const resetProduct = () =>\r\n    {\r\n        setCardName( product.name );\r\n        setCardPrice( product.price );\r\n        setCardPieces( product.stock );\r\n        setCardPromotion( product.sale );\r\n        setCardDescription( product.description );\r\n        setCardDetails( product.details );\r\n        setCardSrc( product.src );\r\n        setFieldWarnings( { name: false, price: false, description: false } );\r\n    };\r\n\r\n    const openDialog = ( title: string, content: string ) =>\r\n    {\r\n        setTitleAlert( title );\r\n        setContentAlert( content );\r\n        setOpenAlert( true );\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                product ?\r\n                    <Grid container spacing={ 2 } className={ classes.root }>\r\n                        <Grid item xs={ 12 } md={ 7 }>\r\n                            {/* PROTO-DISPLAY */ }\r\n                            <Card\r\n                                _id={ product._id }\r\n                                name={ cardName }\r\n                                price={ cardPrice }\r\n                                description={ cardDescription }\r\n                                details={ cardDetails }\r\n                                piecesLeft={ cardPieces }\r\n                                promotion={ cardPromotion }\r\n                                src={ cardSrc }\r\n                                active={ false }\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={ 12 } md={ 5 }>\r\n                            <Form\r\n                                name={ cardName }\r\n                                description={ cardDescription }\r\n                                details={ cardDetails }\r\n                                promotion={ cardPromotion }\r\n                                price={ cardPrice }\r\n                                pieces={ cardPieces }\r\n                                src={ cardSrc }\r\n                                removeImage={ removeImage }\r\n                                change={ handleChanges }\r\n                                reset={ resetProduct }\r\n                                update={ handleUpdate }\r\n                                fieldWarnings={ fieldWarnings }\r\n                                checkFields={ checkFields }\r\n                                openDialog={ openDialog }\r\n\r\n                            />\r\n                        </Grid>\r\n                    </Grid> :\r\n                    <Grid container className={ classes.loading }>\r\n                        <CircularProgress />\r\n                    </Grid>\r\n\r\n            }\r\n            <Dialog\r\n                open={ openAlert }\r\n                title={ titleAlert }\r\n                content={ contentAlert }\r\n                yes={ forcedUpdate }\r\n                setOpen={ setOpenAlert }\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateProduct;\r\n","import React from 'react';\r\n\r\ninterface Props\r\n{\r\n\r\n}\r\n\r\nconst AccountInfoComponent = ( props: Props ) =>\r\n{\r\n    return (\r\n        <div>\r\n            Account info\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AccountInfoComponent;\r\n","import React from 'react';\r\n\r\ninterface Props\r\n{\r\n\r\n}\r\n\r\nconst LoginComponent = ( props: Props ) =>\r\n{\r\n    return (\r\n        <div>\r\n            Login\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginComponent;\r\n","import React from 'react';\r\n\r\ninterface Props\r\n{\r\n\r\n}\r\n\r\nconst RegisterComponent = ( props: Props ) =>\r\n{\r\n    return (\r\n        <div>\r\n            Register\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RegisterComponent;\r\n","import MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\n\r\n//\r\nfunction Alert ( props: AlertProps )\r\n{\r\n    return <MuiAlert elevation={ 6 } variant=\"filled\" { ...props } />;\r\n}\r\n\r\nexport { Alert };","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Grid } from '@material-ui/core';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n//links\r\nimport PageNotFound from './NotFountComponent';\r\nimport Home from './Home';\r\nimport Nav from './Navigation';\r\nimport AddProduct from './Admin/AddProduct';\r\nimport UpdateProduct from './Admin/UpdateProduct';\r\nimport { AccountInfo, Login, Register } from './User';\r\n\r\n\r\n\r\n//@snackbar imports\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Alert } from './Alert';\r\nimport { snackbarActionManager } from '../actions';\r\n\r\n\r\n//@main component that defines the routes\r\nconst Main: React.FC = () =>\r\n{\r\n\r\n    //@snackbar controllers\r\n    const dispatch = useDispatch();\r\n\r\n    //@redux state for snackbar dinamic data\r\n    const snackInfo = useSelector( ( state: any ) => state.snackbar );\r\n\r\n    //@callback when snackbar closes\r\n    const handleSnackbarClose = ( event?: React.SyntheticEvent, reason?: string ) =>\r\n    {\r\n        if ( reason === 'clickaway' )\r\n        {\r\n            return;\r\n        }\r\n        dispatch( snackbarActionManager.hide() );\r\n    };\r\n\r\n    /**visibility of navbar\r\n     * ! true only on PageNotFound\r\n    */\r\n    const [ navVisibility, setNavVisibility ] = useState( true );\r\n\r\n    return (\r\n        <Router>\r\n            <Nav isVisible={ navVisibility } />\r\n            <Grid container>\r\n                <Grid item xs={ false } md={ 1 } lg={ 2 } />\r\n                <Grid item xs={ 12 } md={ 10 } lg={ 8 }>\r\n                    <Switch>\r\n                        <Route exact path='/' component={ Home } />\r\n                        <Route exact path={ '/admin' } component={ Home } />\r\n                        <Route exact path='/admin/add-product' component={ AddProduct } />\r\n                        <Route path='/admin/product/:id' component={ UpdateProduct } />\r\n                        <Route path='/account' component={ AccountInfo } />\r\n                        <Route path='/login' component={ Login } />\r\n                        <Route path='/register' component={ Register } />\r\n                        <Route path='*'>\r\n                            <PageNotFound showNav={ setNavVisibility } />\r\n                        </Route>\r\n                    </Switch>\r\n\r\n\r\n                    <Snackbar\r\n                        open={ snackInfo.open }\r\n                        autoHideDuration={ 4000 }\r\n                        onClose={ handleSnackbarClose }\r\n                        anchorOrigin={ {\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right'\r\n                        } }>\r\n                        <Alert onClose={ handleSnackbarClose } severity={ snackInfo.variant }>\r\n                            { snackInfo.message }\r\n                        </Alert>\r\n                    </Snackbar>\r\n                </Grid>\r\n                <Grid item xs={ false } md={ 1 } lg={ 2 } />\r\n\r\n\r\n            </Grid>\r\n\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport Main from './components/Main';\r\nimport './App.css';\r\n\r\nexport default class App extends Component\r\n{\r\n  render ()\r\n  {\r\n    return (\r\n      <Main />\r\n    );\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { authentificationReducer } from './authentificationReducer';\r\nimport { productsReducer, productsAreLoadedReducer } from './productsReducer';\r\nimport { snackbarReducer } from './snackbarReducers';\r\n\r\n// @params: \r\n//@producst: an array state of products saved\r\n//@productsAreLoaded: a boolean state that indicates if we have out products updated form the server or not\r\n//@snackbar: an object state that contains weather is closed or open, the message and the type/variant\r\n\r\nconst reducer = combineReducers( {\r\n    isLogged: authentificationReducer,\r\n    products: productsReducer,\r\n    productsAreLoaded: productsAreLoadedReducer,\r\n    snackbar: snackbarReducer\r\n} );\r\n\r\nexport default reducer;","interface Action\r\n{\r\n    type: string,\r\n    isForced?: boolean;\r\n}\r\n\r\nconst authentificationReducer = ( state: boolean = false, action: Action ) =>\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case \"LOGIN\":\r\n            state = true;\r\n            break;\r\n        case \"LOGOUT\":\r\n            state = false;\r\n            break;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport { authentificationReducer };","interface Action\r\n{\r\n    type: string,\r\n    payload: any,\r\n    isForced?: boolean;\r\n}\r\n\r\n\r\n\r\n//@products state\r\nconst productsReducer = ( state: any[] = [], action: Action ) =>\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case 'GET':\r\n            return action.payload;\r\n        case 'ADD-PRODUCT' || 'ADD-PRODUCTS':\r\n            return [ ...state, action.payload ];\r\n        case 'UPDATE':\r\n            console.log( action.payload );\r\n            return state.map( ( product ) => product._id === action.payload._id ? action.payload : product );\r\n        case 'DELETE':\r\n            return state.filter( ( product ) => product._id !== action.payload );\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n//@productsAreLoaded state\r\nconst productsAreLoadedReducer = ( state: boolean = false, action: Action ) =>\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case \"LOADED\":\r\n            return true;\r\n        case \"DUMP\":\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { productsReducer, productsAreLoadedReducer };","interface Action\r\n{\r\n    type: string,\r\n    payload: any,\r\n    isForced?: boolean;\r\n}\r\n\r\ninterface SnackInfo\r\n{\r\n    open: boolean,\r\n    message: string,\r\n    variant: string,\r\n}\r\n\r\nconst snackbarReducer = ( state: SnackInfo = { open: false, message: '', variant: 'info' }, action: Action ) =>\r\n{\r\n    switch ( action.type )\r\n    {\r\n        case 'SHOW':\r\n            return { open: true, ...action.payload };\r\n        case 'HIDE':\r\n            return { ...state, open: false };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport { snackbarReducer };","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from '../reducer';\r\n\r\n\r\nexport const store = createStore( reducer, compose( applyMiddleware( thunk ), ( window as any ).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    ( window as any ).__REDUX_DEVTOOLS_EXTENSION__() ) );","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={ store }>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById( 'root' )\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}